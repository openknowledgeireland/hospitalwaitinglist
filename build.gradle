buildscript {
    repositories { jcenter() }
}

ext {
    springBootVersion = "1.5.6.RELEASE"
    jdkVersion = 1.8
}

subprojects {
    apply plugin: "java"
    apply plugin: 'idea'
    apply plugin: "checkstyle"
    apply plugin: "pmd"
    apply plugin: "findbugs"
    apply plugin: "jacoco"

    sourceCompatibility = jdkVersion
    targetCompatibility = jdkVersion
    springBootVersion = springBootVersion
    compileJava.options.encoding = "UTF-8"

    group = "ie.oki"
    version = "0.0.1-SNAPSHOT"

    repositories {
        jcenter()
    }

    checkstyle {
        toolVersion = "8.1"
        configFile = file("$rootDir/config/checkstyle.xml")
        sourceSets = [sourceSets.main]
    }

    tasks.withType(Checkstyle) {
        reports {
            xml.enabled = true
            xml.destination file("${buildDir}/reports/checkstyle/checkstyle-report.xml")
        }
    }

    pmd {
        ruleSetFiles = files("$rootDir/config/pmd-ruleset.xml")
        sourceSets = [sourceSets.main]
    }

    tasks.withType(Pmd) {
        reports {
            xml.enabled = true
            xml.destination file("${buildDir}/reports/pmd/pmd-report.xml")
        }
    }

    findbugs {
        effort = "max"
        reportLevel = "high"
        sourceSets = [sourceSets.main]
    }

    tasks.withType(FindBugs) {
        reports {
            xml.enabled = true
            xml.destination file("${buildDir}/reports/findbugs/findbugs-report.xml")
        }
    }

    jacocoTestReport {
        reports {
            xml.enabled = true
            xml.destination file("${buildDir}/reports/jacoco/xml/jacoco-report.xml")
            html.enabled = true
            html.destination file("${buildDir}/reports/jacoco/html")
        }
    }

    task sourcesJar(type: Jar, dependsOn: classes) {
        classifier = "sources"
        from sourceSets.main.allSource
    }

    artifacts {
        archives sourcesJar
    }

    dependencies {
        compile("org.projectlombok:lombok:1.16.18")
        compile("org.springframework.boot:spring-boot-starter")
        compile("org.springframework.boot:spring-boot-devtools")
        testCompile("org.easymock:easymock:3.4")
        testCompile("org.powermock:powermock-api-mockito:1.6.6")
        testCompile("org.powermock:powermock-module-junit4:1.6.6")
        testCompile("org.springframework.boot:spring-boot-starter-test")
    }
}

task wrapper(type: Wrapper) {
    gradleVersion = "4.1"
}

def exportedProjects = [
    ":hospital-waiting-list-model",
    ":hospital-waiting-list-business",
    ":hospital-waiting-list-web"
]

task alljavadoc(type: Javadoc) {
    source exportedProjects.collect { project(it).sourceSets.main.allJava }
    classpath = files(exportedProjects.collect { project(it).sourceSets.main.compileClasspath })
    destinationDir = file("docs")
}

task codeCoverageReport(type: JacocoReport) {
    executionData fileTree(project.rootDir.absolutePath).include("**/build/jacoco/*.exec")

    subprojects.each {
        sourceSets it.sourceSets.main
    }
}

codeCoverageReport.dependsOn << {
    subprojects*.test
}